events {
    worker_connections 1024; # Optional: Max number of connections
}

http {
    include       mime.types; # Include MIME types for serving various file types
    default_type  application/octet-stream;

    sendfile        on; # Optimize file transfer
    keepalive_timeout  65;

    error_log /var/log/nginx/error.log warn;
    log_format nginx '\$remote_addr - \$remote_user [\$time_local] '
                      '"\$request" \$status \$body_bytes_sent \$request_time '
                      '"\$http_referer" "\$http_user_agent"';

    access_log /var/log/nginx/access.log;

    # Define upstream blocks for microservices
    upstream chat_service {
        server chatservice:8080; # Chat service backend
    }

    upstream sql_chat {
        server sqlchat:3000; # Frontend service
    }

    # Server block for handling HTTP requests
    server {
        listen       80; # Listen on port 80
        server_name  localhost; # Replace with your domain or IP if needed

        # Location block for serving static files
        location / {
            proxy_pass http://sql_chat;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # CORS Headers
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization";
        }

        # Location for Chat API
        location /api/Chat {
            proxy_pass http://chat_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # CORS Headers
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization";

            # Handle preflight requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type, Authorization";
                add_header Content-Length "0";
                add_header Content-Type "text/plain";
                return 204;
            }
        }

        # Custom error pages
        error_page 404 /404.html;
        location = /404.html {
            root   /usr/share/nginx/html;
        }
    }
}